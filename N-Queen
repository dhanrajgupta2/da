# EXP 5 : Design n-Queens matrix having first Queen placed. Use backtracking to place remaining Queens to generate the final n-queenâ€™s matrix

# solution :

def is_safe(board, row, col, n):
    for i in range(row):
        if board[i][col] or \
           (col-i >= 0 and board[row-i-1][col-i]) or \
           (col+i < n and board[row-i-1][col+i]):
            return False
    return True

def solve(board, row, n):
    if row == n:
        return True
    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1
            if solve(board, row + 1, n):
                return True
            board[row][col] = 0
    return False

def print_board(board):
    for row in board:
        print(' '.join('Q' if x else '.' for x in row))

# Example: 4-Queens with first queen at (0,1)
n = 4
board = [[0]*n for _ in range(n)]
board[0][1] = 1  # First queen placed manually

if solve(board, 1, n):  # Start from row 1 since row 0 is set
    print_board(board)
else:
    print("No solution")
