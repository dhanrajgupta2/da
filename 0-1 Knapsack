# Exp 4 : Write a program to solve a 0-1 Knapsack problem using dynamic programming or branch and
bound strategy.

# solution  W	= Maximum weight capacity of the knapsack , wt = List of weights of the n items (e.g., [10, 20, 30]).
# val  = List of values/profits corresponding to each item (e.g., [60, 100, 120]) , n = Number of items (i.e. len(val) or len(wt)).

def knapsack(W, wt, val, n):                                                                  
    dp = [[0 for x in range(W+1)] for x in range(n+1)]                                        
    
    for i in range(n+1):
        for w in range(W+1):
            if i == 0 or w == 0:
                dp[i][w] = 0
            elif wt[i-1] <= w:
                dp[i][w] = max(val[i-1] + dp[i-1][w - wt[i-1]], dp[i-1][w])
            else:
                dp[i][w] = dp[i-1][w]
    
    return dp[n][W]

# Example usage
val = [60, 100, 120]   # values of items
wt = [10, 20, 30]      # weights of items
W = 50                 # total capacity of knapsack
n = len(val)

print("Maximum value:", knapsack(W, wt, val, n))


<=======================================================================================================================================>
