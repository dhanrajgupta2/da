# Exp 1 : write a program non-recursive and recursive program to calculate fibonacci numbers and analyze their time and space complexity 

# solution 


# non recrusive

import time

def fib(n):
    a, b = 0, 1
    for i in range(n + 1):
        yield a  # yield each Fibonacci number one by one
        a, b = b, a + b

# Ask user for input
n = int(input("Enter how many Fibonacci numbers you want: "))

start = time.time()
result = list(fib(n))  # convert generator to list
end = time.time()

print(result)
print(f"Time: {end - start:.6f}s")

<=====================================================================================================================================================>
# recursive 

import time

def fib(n):
    # Base cases:
    if n == 0:
        return [0]
    elif n == 1:
        return [0, 1]
    
    # Recursive call to get fib sequence up to n-1
    series = fib(n - 1)
    
    # Append the next Fibonacci number: sum of last two elements
    series.append(series[-1] + series[-2])
    
    return series

# Ask user for input
n = int(input("Enter how many Fibonacci numbers you want: "))

start = time.time()
result = fib(n)
end = time.time()

print(result)
print(f"Time: {end - start:.6f}s")

or 

import time

def fib(n):
    if n <= 1:
        return n
    return fib(n - 1) + fib(n - 2)

start = time.time()
result = fib(10)
end = time.time()

print(result)
print(f"Time: {end - start:.8f}s")

<==========================================================================================================================================================================================================================================================================================================>
# EXP 2 : write a program to implement huffman encoding using a greedy strategy in python



import heapq
from collections import Counter

# Node class for the Huffman Tree
class Node:
    def __init__(self, char, freq, left=None, right=None):
        self.char = char        # Character
        self.freq = freq        # Frequency
        self.left = left        # Left child
        self.right = right      # Right child

    def __lt__(self, other):
        return self.freq < other.freq  # Compare nodes by frequency

# Huffman encoding function
def huffman_encoding(text):
    # Count frequency of each character
    frequency = Counter(text)

    # Create a priority queue (min-heap) of nodes
    heap = [Node(char, freq) for char, freq in frequency.items()]
    heapq.heapify(heap)

    # Build the Huffman Tree
    while len(heap) > 1:
        left = heapq.heappop(heap)
        right = heapq.heappop(heap)
        merged = Node(None, left.freq + right.freq, left, right)
        heapq.heappush(heap, merged)

    # Generate the Huffman codes
    root = heap[0]
    codes = {}

    def generate_codes(node, code=""):
        if node.char:
            codes[node.char] = code
        else:
            generate_codes(node.left, code + "0")
            generate_codes(node.right, code + "1")

    generate_codes(root)
    return codes

huffman_encoding("huffman")

<============================================================================================================================================>

# Exp 3 : Write a program to solve a fractional Knapsack problem using a greedy method.

# solution

def fractional_knapsack(weights, values, capacity):
# Step 1: Calculate value-to-weight ratio and group with weights and values

    ratio = [(v/w, w, v) for v, w in zip(values, weights)]

# Step 2: Sort items by ratio in descending order

    ratio.sort(reverse=True)

    total_value = 0    # Total value in the knapsack

# Step 3: Pick items one by one     r = ratio , w = weight , v = value

    for r, w, v in ratio:
        if capacity >= w:

# Take the whole item

            total_value += v
            capacity -= w
        else:
            total_value += r * capacity
            break
    return total_value

# Example
weights = [10, 20, 30]
values = [60, 100, 120]
capacity = 50

print("Max value:", fractional_knapsack(weights, values, capacity))


<=====================================================================================================>

# Exp 4 : Write a program to solve a 0-1 Knapsack problem using dynamic programming or branch and
bound strategy.

# solution  W	= Maximum weight capacity of the knapsack , wt = List of weights of the n items (e.g., [10, 20, 30]).
# val	List of values/profits corresponding to each item (e.g., [60, 100, 120]) , n = Number of items (i.e. len(val) or len(wt)).

def knapsack(W, wt, val, n):                                                                  
    dp = [[0 for x in range(W+1)] for x in range(n+1)]                                        
    
    for i in range(n+1):
        for w in range(W+1):
            if i == 0 or w == 0:
                dp[i][w] = 0
            elif wt[i-1] <= w:
                dp[i][w] = max(val[i-1] + dp[i-1][w - wt[i-1]], dp[i-1][w])
            else:
                dp[i][w] = dp[i-1][w]
    
    return dp[n][W]

# Example usage
val = [60, 100, 120]   # values of items
wt = [10, 20, 30]      # weights of items
W = 50                 # total capacity of knapsack
n = len(val)

print("Maximum value:", knapsack(W, wt, val, n))


<=======================================================================================================================================>

# EXP 5 : Design n-Queens matrix having first Queen placed. Use backtracking to place remaining Queens to generate the final n-queenâ€™s matrix

# solution :

def is_safe(board, row, col, n):
    for i in range(row):
        if board[i][col] or \
           (col-i >= 0 and board[row-i-1][col-i]) or \
           (col+i < n and board[row-i-1][col+i]):
            return False
    return True

def solve(board, row, n):
    if row == n:
        return True
    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1
            if solve(board, row + 1, n):
                return True
            board[row][col] = 0
    return False

def print_board(board):
    for row in board:
        print(' '.join('Q' if x else '.' for x in row))

# Example: 4-Queens with first queen at (0,1)
n = 4
board = [[0]*n for _ in range(n)]
board[0][1] = 1  # First queen placed manually

if solve(board, 1, n):  # Start from row 1 since row 0 is set
    print_board(board)
else:
    print("No solution")

